#!/usr/bin/python
#
"""
Tree of Light class implementation for the Tree-of-Light API for Holiday by Moorescloud

Homepage and documentation: http://dev.moorescloud.com/

Copyright (c) 2013, Mark Pesce.
License: MIT (see LICENSE for details)
"""

__author__ = 'Mark Pesce'
__version__ = '1.0a1'
__license__ = 'MIT'

import sys, array, socket

class tolAPI:

	NUM_HOLIDAYS = 27				# 9 shapes by 3 strings
	NUM_GLOBES = 50				# Number of globes on each string

	# Storage for all 50 globe values
	# 
	globes = [ [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41],
	[ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41],
	[ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41],
	[ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41],
	[ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41],
	[ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41],
	[ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41],
	[ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41],
	[ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41],
	[ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41], [ 0x41, 0x41, 0x41] ]

	def __init__(self):
		print "Instancing..."
		return

	def setglobe(self, globenum, r, g, b):
		"""Set a globe"""
		if (globenum < 0) or (globenum >= self.NUM_GLOBES):
			return
		self.globes[globenum][0] = r
		self.globes[globenum][1] = g
		self.globes[globenum][2] = b

	def fill(self, r, g, b):
		"""Sets the whole string to a particular colour"""
		for e in self.globes:
			e[0] = int(r)
			e[1] = int(g)
			e[2] = int(b)

	def getglobe(self, globenum):
		"""Return a tuple representing a globe's RGB color value"""
		if (globenum < 0) or (globenum >= self.NUM_GLOBES):
			return False
		return (self.globes[globenum][0], self.globes[globenum][1], self.globes[globenum][2])

	def render(self):
		"""The render routine sends out a UDP packet using the SecretAPI"""
		# Create the 160-byte array of data
		pkt = array.array('B')
		for i in range(self.NUM_HOLIDAYS):
			for j in range(10):
				pkt.append(0)  		# initialize basic packet, ignore first 10 bytes
			for g in self.globes:
				pkt.append(g[0]+i)
				pkt.append(g[1]+i)
				pkt.append(g[2]+i)

		# Send the packet to the caller
		return pkt

# Just some basic testerating from the command linery
#
if __name__ == '__main__':
	print "Why are you doing this?"